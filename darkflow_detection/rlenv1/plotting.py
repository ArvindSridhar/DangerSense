import matplotlib.pyplot as plt
import numpy as np

x = np.array([-382300,
419650,
419675,
179100,
339425,
98875,
339475,
419625,
419675,
179050,
419750,
339475,
419805,
339500,
98850,
339500,
18805,
339450,
419830,
18675,
259380,
-61450,
179230,
339450,
419830,
259325,
259300,
500030,
419700,
259405])

y = np.array([54500,
54445,
134525,
214745,
134595,
134500,
294850,
214700,
214725,
54420,
214745,
294945,
54420,
-25750,
214675,
214720,
134570,
-185900,
294950,
214825,
134650,
54600,
294920,
375175,
295000,
214850,
294950,
294870,
294895,
214875])

z = np.array([3924.4999999999927,
4108.899999999998,
4222.499999999998,
4233.6,
4254.9,
4239.2,
4246.5,
4270.5])

# plt.plot(x)
# plt.show()
# plt.plot(y)
# plt.show()
# plt.plot(z)
# plt.show()

# this one is great: trained 500 iters on each episode, 200 episodes, eps = 0.3, decay = 0.5
w = np.array([
285.2999999999999,
341.40000000000026,
354.20000000000044,
357.1000000000007,
357.6000000000004,
364.30000000000047,
362.4000000000008,
365.10000000000093,
362.4000000000008,
373.900000000001,
376.80000000000047,
366.00000000000045,
370.50000000000057,
365.10000000000093,
357.0000000000007,
370.0000000000007,
370.9000000000005,
355.60000000000025,
356.10000000000014,
352.0000000000002,
366.9000000000003,
358.3000000000005,
368.70000000000044,
362.8000000000002,
369.1000000000006,
346.20000000000056,
358.8000000000004,
368.7000000000007,
359.20000000000044,
364.60000000000076,
355.20000000000044,
366.40000000000066,
361.90000000000055,
352.90000000000055,
379.5000000000008,
355.20000000000056,
364.2000000000007,
363.30000000000075,
367.3000000000006,
339.40000000000066,
349.30000000000064,
385.70000000000067,
372.7000000000004,
368.7000000000006,
371.4000000000004,
362.7000000000005,
354.7000000000006,
376.3000000000005,
375.9000000000003,
359.2000000000004,
357.40000000000055,
366.00000000000034,
368.60000000000053,
347.5000000000006,
371.20000000000084,
364.5000000000007,
346.20000000000056,
355.2000000000006,
376.3000000000006,
351.6000000000005,
377.2000000000005,
365.1000000000005,
354.30000000000086,
366.90000000000066,
377.7000000000004,
357.0000000000007,
378.50000000000045,
367.80000000000064,
363.7000000000008,
369.60000000000053,
352.9000000000005,
357.9000000000007,
357.90000000000083,
361.5000000000009,
370.90000000000043,
352.00000000000045,
367.7000000000003,
354.2000000000004,
351.10000000000014,
367.30000000000064,
352.5000000000007,
386.7000000000008,
371.80000000000075,
372.3000000000005,
365.50000000000045,
361.70000000000095,
353.4000000000005,
383.1000000000008,
371.8000000000005,
372.3000000000005,
351.1000000000006,
368.20000000000056,
382.2000000000005,
358.8000000000004,
374.9000000000004,
361.00000000000045,
362.4000000000008,
373.5000000000007,
361.90000000000094,
359.2000000000009,
369.6000000000007,
361.90000000000066,
370.5000000000008,
339.90000000000066,
366.00000000000085,
355.2000000000007,
359.7000000000006,
383.10000000000036,
354.2000000000008,
366.000000000001,
362.80000000000035,
342.10000000000065,
361.8000000000008,
362.40000000000055,
348.9000000000003,
343.90000000000043,
351.60000000000076,
354.30000000000064,
364.2000000000006,
381.70000000000033,
362.80000000000064,
360.6000000000006,
369.6000000000007,
361.40000000000066,
344.4000000000003,
354.3000000000006,
366.40000000000043,
367.20000000000095,
381.300000000001,
365.50000000000057,
374.1000000000007,
355.20000000000067,
372.7000000000007,
381.7000000000005,
359.7000000000005,
374.9000000000006,
372.300000000001,
364.2000000000005,
367.30000000000064,
360.6000000000003,
372.30000000000064,
358.70000000000084,
373.6000000000007,
387.1000000000004,
365.1000000000005,
369.10000000000036,
366.4000000000008,
369.1000000000005,
375.40000000000055,
363.30000000000064,
364.2000000000006,
381.3000000000006,
364.2000000000006,
367.80000000000075,
373.60000000000065,
362.40000000000055,
359.20000000000095,
375.0000000000002,
377.2000000000005,
348.9000000000003,
363.6000000000005,
362.4000000000008,
373.6000000000004,
370.90000000000055,
366.90000000000083,
380.8000000000005,
353.4000000000006,
363.30000000000086,
373.6000000000008,
361.0000000000006,
375.0000000000004,
370.0000000000004,
365.1000000000007,
370.5000000000007,
358.30000000000064,
356.50000000000045,
373.2000000000005,
373.20000000000067,
367.3000000000005,
362.80000000000047,
370.9000000000008,
364.2000000000006,
376.3000000000008,
363.1000000000007,
379.5000000000007,
368.2000000000008,
384.0000000000007,
361.00000000000045,
345.30000000000064,
374.100000000001,
371.40000000000066,
360.1000000000005,
340.8000000000003,
381.30000000000103,
376.8000000000006,
366.40000000000055,
350.6000000000008,
350.7000000000006,
375.3000000000008,
370.40000000000043,
])

# this one is amazing: epsilon 0.6, decay 0.6, 200 episodes, 500 iters per
h = np.array([
251.200,
400.800,
430.500,
461.000,
477.7,
471.6,
491.700,
499.8,
494.6,
500.1,
501,
501,
500.0,
497.0,
501,
501,
501,
501,
499.5,
500.5,
501,
501,
501,
500.5,
500.5,
500.5,
499.5,
501,
500.0,
500.5,
500.5,
500.0,
500.5,
501,
500.5,
500.5,
500.5,
501,
500.5,
501,
500.5,
501,
501,
501,
500.5,
501,
501,
501,
500.5,
500.5,
500.5,
501,
501,
501,
500.0,
500.5,
501,
500.5,
500.0,
500.0,
500.0,
500.0,
501,
500.5,
500.0,
501,
501,
500.5,
501,
500.5,
501,
501,
500.5,
500.5,
501,
501,
500.5,
501,
501,
500.5,
500.5,
500.5,
501,
501,
499.5,
501,
501,
500.5,
501,
500.5,
501,
501,
500.5,
500.5,
500.5,
501,
499.5,
500.5,
500.5,
500.5,
500.5,
501,
501,
500.0,
501,
501,
499.0,
501,
501,
501,
501,
500.0,
500.5,
501,
501,
499.0,
499.5,
500.5,
500.5,
501,
500.5,
500.5,
501,
501,
500.0,
501,
500.0,
501,
501,
500.5,
500.5,
500.0,
501,
501,
501,
501,
500.5,
501,
501,
501,
500.5,
501,
501,
501,
501,
501,
501,
501,
501,
501,
501,
501,
500.5,
500.5,
500.5,
501,
501,
501,
501,
501,
500.5,
501,
500.5,
501,
500.5,
501,
500.5,
500.5,
501,
500.5,
501,
501,
501,
499.5,
501,
501,
500.0,
501,
499.5,
500.0,
501,
501,
500.5,
501,
500.5,
500.5,
500.5,
501,
501,
500.5,
501,
500.5,
499.5,
501,
501,
500.5,
500.5,
500.0,
501,
501,
])


g_rewards = np.array([
67.9999999999982,
82.9999999999975,
497.5999999999988,
581.8999999999992,
635.2999999999995,
628.0999999999995,
656.7999999999997,
1696.8999999999999,
1703.0,
1691.8,
1688.2,
1680.5,
1711.0,
1706.5,
1698.5,
1702.5,
1700.5,
1705.0,
1718.0,
1708.0,
1712.0,
1688.5,
1702.5,
1697.5,
1705.0,
1704.0,
1683.5,
1711.0,
1704.5,
1706.5,
1725.5,
1693.5,
1712.0,
1686.0,
1694.0,
1702.5,
1720.0,
1699.0,
1716.0,
1711.0,
1700.0,
1709.5,
1695.5,
1690.5,
1701.5,
1690.5,
1701.0,
1695.0,
1688.0,
1711.0,
1701.0,
1693.5,
1697.5,
1693.0,
1712.0,
1700.0,
1703.0,
1711.5,
1690.5,
1701.0,
1687.0,
1689.0,
1699.5,
1686.0,
1700.5,
1695.5,
1694.0,
1696.5,
1703.0,
1696.5,
1712.0,
1692.0,
1713.0,
1689.0,
1696.0,
1692.0,
1704.0,
1697.5,
1717.0,
1683.5,
1692.5,
1710.0,
1690.5,
1694.0,
1705.0,
1710.0,
1727.0,
1698.5,
1708.5,
1716.0,
1713.5,
1688.0,
1699.0,
1708.0,
1688.5,
1696.0,
1695.0,
1695.0,
1699.5,
1693.5,
1726.5,
1712.5,
1694.0,
1711.0,
1715.5,
1698.5,
1706.0,
1706.0,
1715.5,
1698.5,
1705.0,
1707.0,
1720.5,
1709.0,
1708.5,
1712.0,
1701.0,
1704.0,
1709.0,
1700.5,
1713.0,
1695.0,
1690.5,
1703.5,
1712.5,
1691.0,
1694.5,
1702.0,
1715.5,
1697.5,
1707.0,
1700.0,
1699.0,
1702.0,
1691.5,
1719.0,
1718.0,
1704.0,
1687.0,
1698.0,
1716.5,
1709.0,
1731.5,
1693.5,
1703.5,
1687.5,
1707.0,
1704.0,
1706.5,
1707.0,
1679.0,
1707.0,
1700.0,
1705.0,
1718.5,
1698.0,
1704.0,
1702.5,
1709.0,
1705.0,
1701.5,
1721.0,
1699.0,
1706.5,
1705.0,
1681.0,
1715.0,
1698.5,
1709.5,
1702.5,
1703.5,
1695.0,
1690.0,
1709.5,
1731.0,
1701.5,
1707.0,
1695.0,
1691.5,
1694.0,
1702.5,
1703.0,
1696.0,
1704.5,
1698.5,
1711.5,
1700.5,
1700.0,
1695.5,
1702.5,
1713.0,
1704.5,
1700.0,
1688.5,
1692.0,
1693.5,
1717.0,
1710.5,
1717.0,
1704.5,
])

g_crashes = np.array([
193,
159,
86,
46,
32,
21,
14,
5,
4,
2,
4,
2,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
])

# plt.plot(g_rewards)
# plt.show()
# plt.plot(g_crashes)
# plt.show()

a11 = [1122.9999999999961,
1446.899999999997,
1689.4999999999984,
1822.5999999999985,
1890.6999999999991,
1937.6999999999998,
1965.7999999999995,
1967.1999999999996,
1981.8,
1991.3,
1996.1,
1996.3,
2001,
1998.3,
1997.8,
2000.5,
2000.5,
2001,
2000.0,
2001,
2000.5,
2001,
2001,
2000.0,
2001,
2001,
2000.0,
2000.5,
2001,
2000.5]

b11 = [245,
161,
90,
49,
30,
17,
9,
11,
5,
3,
1,
1,
0,
1,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0]


fig, ax1 = plt.subplots()
t = range(1, 31) #201
s1 = a11 #g_rewards
ax1.plot(t, s1,'b')
ax1.set_xlabel('training episodes')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('cumulative attained reward', color='b')
ax1.tick_params('y', colors='b')

ax2 = ax1.twinx()
s2 = b11 #g_crashes
ax2.plot(t, s2, 'r')
ax2.set_ylabel('number of crashes', color='r')
ax2.tick_params('y', colors='r')

fig.tight_layout()
plt.show()